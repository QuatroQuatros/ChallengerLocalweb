version: '3'
services:
  mysql:
    image: 'mysql:latest'
    environment:
      - 'MYSQL_DATABASE=challenger'
      - 'MYSQL_ROOT_PASSWORD=root'
    ports:
      - '3306:3306'
    networks:
      - api_network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - api_network

  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - api_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:9000/minio/health/live" ]
      interval: 30s
      retries: 5
    restart: always

  createbucket:
    image: minio/mc
    container_name: createbucket
    depends_on:
      - minio
    networks:
      - api_network
    entrypoint: >
      /bin/sh -c "
        until (mc alias set myminio http://minio:9000 minio minio123 && mc ls myminio); do
        echo 'Esperando pelo MinIO...'
        sleep 5;
        done;
        mc mb myminio/email-files
      "
    restart: on-failure

  spring-api:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      minio:
        condition: service_healthy
      createbucket:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    networks:
      - api_network

  spam-classifier:
    build:
      context: ../SPAM
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_started
    networks:
      - api_network
    volumes:
      - spam_data:/app

volumes:
  rabbitmq_data:
  minio_data:
  spam_data:

networks:
  api_network:
    driver: bridge
